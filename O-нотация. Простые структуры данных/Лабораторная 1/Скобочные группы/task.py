from typing import Any

def check_brackets(brackets_row: str) -> bool:
    """
    Проверьте, является ли входная строка допустимой последовательностью скобок

    :param brackets_row: Входная строка для проверки
    :return: True, если последовательность корректна, False в противном случае
    """
    st = Stack()
    try:
        st.fun(brackets_row)
    except IndexError:
        return False
    if not st._stack:
        return True
    return False
    ...  # TODO реализовать проверку скобочной группы





'''Вы идёте от начала строки. Каждый раз, когда встречаете открывающую скобку - кладёте её в стек. Каждый раз, 
когда встречаете закрывающую - убираете из стека ранее положенную скобку.
Если нужно убрать скобку из стека, а их там больше не осталось - последовательность неправильная. 
Если после разбора строки в стеке остались лишние скобки - последовательность неправильная. 
Во всех остальных случаях - правильная.
Так же можно проверять последовательность, в которой есть разные скобки - круглые, квадратные, фигурные и т.п. 
Просто к тем проверкам, которые я описал выше, добавляется ещё проверка на то, что забираемая из стека открывающая 
скобка по форме должна совпадать с той закрывающей, которая у вас сейчас встретилась в строке.
'''

class Stack:
    def __init__(self):
        self._stack = []

    def push(self, elem: Any) -> None:
        """
        Добавление элемента в вершину стека

        :param elem: Элемент, который должен быть добавлен
        """
        self._stack.append(elem)  # TODO реализовать операцию push

    def pop(self) -> Any:
        """
        Извлечение элемента из вершины стека.

        :raise: IndexError - Ошибка, если стек пуст

        :return: Извлеченный с вершины стека элемент.
        """
        if not self._stack:
            raise IndexError("Извлечение элемента из пустого стека невозможно")
        self._stack.pop()  # TODO реализовать операцию pop

    def __len__(self) -> int:
        """ Количество элементов в стеке. """
        return len(self._stack)   # TODO реализовать операцию __len__)

    def fun(self, x: str):
        for i in x:
            if i == '(':
                self.push(i)
            else:
                self.pop()


if __name__ == '__main__':
    print(check_brackets("()()"))  # True
    print(check_brackets(")("))  # False

